<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 基于AspectJ的spring的AOP编写之XML方式 -->

    <!-- 1.创建目标对象 -->
    <bean id="customerService" class="com.yiwobao.aop.service.CustomerServiceImpl"/>

    <!-- 2.创建切面类对象 -->
    <bean id="myAspect" class="com.yiwobao.aop.asp.MyAspect"/>

    <!-- 3.配置AOP切面 -->
    <aop:config>
        <!-- 切面 = 通知+切入点 -->
        <aop:aspect ref="myAspect">
            <!--
                aop:before: 代表前置通知（后面会详细介绍各种不同类型的通知的用法）
                writeLog: 该方法为MyAspect类中的writeLog方法
                pointcut-ref： 代表引用一个切入点

             -->
            <aop:before method="before" pointcut-ref="pt"/>
            <aop:after method="after" pointcut-ref="pt"/>
            <aop:after-returning method="afterReturning" returning="money" pointcut-ref="pt"/>
            <aop:after-throwing method="afterThrowing" throwing="e" pointcut-ref="pt"/>
            <aop:around method="around" pointcut-ref="pt"/>
            <!--
                利用环绕通知来模拟业务层方法做事务管理。
                aop:pointcut：代表切入点配置
                expression：这里配置切入点表达式，用于声明哪些方法需要被拦截  *表示所有的方法()里面表示没有参数
             -->
            <aop:pointcut expression="execution(public * com.yiwobao.aop.service.CustomerServiceImpl.*(..))" id="pt"/>
        </aop:aspect>
    </aop:config>

</beans>